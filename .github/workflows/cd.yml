name: cd

on:
  push:
    tags:
      - 'v*'

jobs:
  aws:
    name: AWS
    runs-on: ubuntu-latest
    steps:
      - name: Check out code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Configure AWS Credentials using Secrets
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-session-token: ${{ secrets.AWS_SESSION_TOKEN }}
          aws-region: us-east-1

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build and push to Amazon ECR
        uses: docker/build-push-action@v4
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: |
            ${{ steps.login-ecr.outputs.registry }}/fragments:${{ github.ref_name }}
            ${{ steps.login-ecr.outputs.registry }}/fragments:latest

      - name: Fill in the new image ID in the Amazon ECS task definition
        id: update-task-def
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: fragments-definition.json
          container-name: fragments-container
          image: ${{ steps.login-ecr.outputs.registry }}/fragments:${{ github.ref_name }}
          environment-variables: |
            LOG_LEVEL=debug
            NODE_ENV=production
            AWS_COGNITO_POOL_ID=${{ secrets.TASK_AWS_COGNITO_POOL_ID }}
            PORT=${{ secrets.TASK_PORT }}
            LOCATION_URL=${{ secrets.TASK_LOCATION_URL }}
            AWS_COGNITO_CLIENT_ID=${{ secrets.TASK_AWS_COGNITO_CLIENT_ID }}

      - name: Deploy Amazon ECS task definition
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: ${{ steps.update-task-def.outputs.task-definition }}
          cluster: fragments-cluster1
          service: fragments-service
          wait-for-service-stability: true
